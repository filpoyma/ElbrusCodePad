#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('express-default:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

// Массив со всеми подключениями
const connections = [];

// Функция, которая сработает при подключении к странице
io.sockets.on('connection', socket => {
  console.log('Успешное соединение');

  // Добавление нового соединения в массив
  connections.push(socket);
  console.log(connections.map(c => c.client.id));

  // Функция, которая срабатывает при отключении от сервера
  socket.on('disconnect', data => {
    // Удаления пользователя из массива
    connections.splice(connections.indexOf(socket), 1);
    console.log('Отключились');
  });

  // Функция получающая сообщение от какого-либо пользователя
  socket.on('send event', event => {
    // Передаем событие 'add mess',
    // Рассылка сообщений пользователям.
    io.sockets.emit('adds event', {
      data: event.event,
    });
  });
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
